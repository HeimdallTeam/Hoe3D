%# -*-C-*- vi: set ft=c:
%# This file is processed in several stages.
%# Here are the stages, as best as I can describe:
%#
%#   1. flex.skl is processed through GNU m4 during the
%#      pre-compilation stage of flex. Only macros starting
%#      with `m4preproc_' are processed, and quoting is normal.
%#
%#   2. The preprocessed skeleton is translated verbatim into a
%#      C array, saved as "skel.c" and compiled into the flex binary.
%#
%#   3. At runtime, the skeleton is generated and filtered (again)
%#      through m4. Macros beginning with `m4_' will be processed.
%#      The quoting is "" and " so we don't interfere with
%#      user code.
%# 
%# All generate macros for the m4 stage contain the text "m4" or "M4"
%# in them. This is to distinguish them from CPP macros.
%# The exception to this rule is YY_G, which is an m4 macro, 
%# but it needs to be remain short because it is used everywhere.
%#
/* A lexical scanner generated by flex  */
%# 
%# Lines in this skeleton starting with a "%" character are "control lines"
%# and affect the generation of the scanner. The possible control codes are
%# listed and processed in misc.c.
%#
%#   %#  -  A comment. The current line is omitted from the generated scanner.
%#   %if-c++-only  -  The following lines are printed for C++ scanners ONLY.
%#   %if-c-only    -  The following lines are NOT printed for C++ scanners.
%#   %if-c-or-c++  -  The following lines are printed in BOTH C and C++ scanners.
%#   %if-reentrant     - Print for reentrant scanners.(push)
%#   %if-not-reentrant - Print for non-reentrant scanners. (push)
%#   %if-bison-bridge  - Print for bison-bridge. (push)
%#   %if-not-bison-bridge  - Print for non-bison-bridge. (push)
%#   %endif        - pop from the previous if code.
%#   %%  -  A stop-point, where code is inserted by flex.
%#          Each stop-point is numbered here and also in the code generator.
%#          (See gen.c, etc. for details.)
%#   %not-for-header  -  Begin code that should NOT appear in a ".h" file.
%#   %ok-for-header   -  %c and %e are used for building a header file.
%#   %if-tables-serialization
%#
%#   All control-lines EXCEPT comment lines ("%#") will be inserted into
%#   the generated scanner as a C-style comment. This is to aid those who
%#   edit the skeleton.
%#
#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION FLEX_MAJOR_VERSION
#define YY_FLEX_MINOR_VERSION FLEX_MINOR_VERSION
#define YY_FLEX_SUBMINOR_VERSION FLEX_SUBMINOR_VERSION
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#include <stdio.h>

typedef int flex_int32_t;
typedef short flex_int16_t;
#define yyconst const
#define YY_G(a) (a)
#define YY_SC_TO_UI(c) ((unsigned int)c)

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */

/*    do{ yylineno++;
        yycolumn=0;
    }while(0)*/
/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0
/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif
/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))


#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif
extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
#define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

%if-c-only Standard (non-C++) definition

%if-not-reentrant
%not-for-header
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
%ok-for-header
%endif

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (  );

static void yyensure_buffer_stack (  );
static void yy_load_buffer_state (  );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

%endif

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );



#define yy_new_buffer yy_create_buffer




#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}




#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}




#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)


%% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here

%if-c-only Standard (non-C++) definition



static yy_state_type yy_get_previous_state (  );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer (  );
static void yy_fatal_error ( const char msg[]  );


%endif



/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
%% [2.0] code to fiddle yytext and yyleng for yymore() goes here \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
%% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \
	(yy_c_buf_p) = yy_cp;




%% [4.0] data tables for the DFA and the user's section 1 definitions go here



M4_YY_SC_DEFS




#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
%if-c-only
#include <unistd.h>
%endif
%if-c++-only
#include <unistd.h>
%endif
#endif


#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

%if-c-only Reentrant structure and macros (non-C++).
%if-reentrant



/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;



    yy_state_type *yy_state_buf;
    yy_state_type *yy_state_ptr;
    char *yy_full_match;
    int yy_lp;




    char yytext_r[YYLMAX];
    char *yytext_ptr;
    int yy_more_offset;
    int yy_prev_more_offset;


    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;




    YYSTYPE * yylval_r;




    YYLTYPE * yylloc_r;


    }; /* end struct yyguts_t */



%if-c-only


static int yy_init_globals (  );

%endif

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval (yylval_r)
    #    define yylloc (yylloc_r)
    
/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */



int yylex_destroy (  );




int yyget_debug (  );




void yyset_debug ( int debug_flag  );




YY_EXTRA_TYPE yyget_extra (  );




void yyset_extra ( YY_EXTRA_TYPE user_defined  );




FILE *yyget_in (  );




void yyset_in  ( FILE * in_str  );




FILE *yyget_out (  );




void yyset_out  ( FILE * out_str  );




int yyget_leng (  );




char *yyget_text (  );




int yyget_lineno (  );




void yyset_lineno ( int line_number  );


%if-bison-bridge


YYSTYPE * yyget_lval (  );


void yyset_lval ( YYSTYPE * yylval_param  );




    
       YYLTYPE *yyget_lloc (  );
    


    
        void yyset_lloc ( YYLTYPE * yylloc_param  );
    

%endif
%endif End reentrant structures and macros.

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (  );
#else
extern int yywrap (  );
#endif
#endif

%not-for-header
    
    static void yyunput ( int c, char *buf_ptr  );
    
%ok-for-header
%endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
%if-c-only Standard (non-C++) definition
%not-for-header
#ifdef __cplusplus
static int yyinput (  );
#else
static int input (  );
#endif
%ok-for-header
%endif
#endif


%if-c-only
%# TODO: This is messy.





        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    




    static void yy_push_state ( int new_state );
    
    static void yy_pop_state (  );
    
    static int yy_top_state (  );
    








%endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif



/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
%if-c-only Standard (non-C++) definition
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
%endif
%if-c++-only C++ definition
#define ECHO LexerOutput( yytext, yyleng )
%endif
#endif




/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
//%% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \
%% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \
// end of %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \
\
%if-c++-only C++ definition \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
%endif

#endif




/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return 0
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif



/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
%if-c-only
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
%endif
%if-c++-only
#define YY_FATAL_ERROR(msg) LexerError( msg )
%endif
#endif


/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif




/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif




%% [6.0] YY_RULE_SETUP definition goes here


%not-for-header
/** The main scanner function which does all the work.
 */
int lex()
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

    
/*        YYSTYPE * yylval;
        YYLTYPE * yylloc;
    

// [7.0] user's declarations go here
%% [7.0] user's declarations go here
// end of [7.0] user's declarations go here

    yylval = yylval_param;
    yylloc = yylloc_param;
	if ( !(yy_init) )
		{
		(yy_init) = 1;


        // Create the reject buffer large enough to save one state per allowed character. 
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );


		if ( ! (yy_start) )
			(yy_start) = 1;	// first start state 

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}*/

	while ( 1 )		/* loops until end-of-file is reached */
		{
// %% [8.0] yymore()-related code goes here
%% [8.0] yymore()-related code goes here
// end of %% [8.0] yymore()-related code goes here
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

//%% [9.0] code to set up and find next match goes here
%% [9.0] code to set up and find next match goes here
// end of %% [9.0] code to set up and find next match goes here

yy_find_action:
// %% [10.0] code to find the action number goes here
%% [10.0] code to find the action number goes here
// end of %% [10.0] code to find the action number goes here

		YY_DO_BEFORE_ACTION;

//%% [11.0] code for yylineno update goes here
%% [11.0] code for yylineno update goes here
// end of %% [11.0] code for yylineno update goes here

do_action:	/* This label is used only to access EOF actions. */

//%% [12.0] debug code goes here
%% [12.0] debug code goes here
//end of %% [12.0] debug code goes here

		switch ( yy_act )
	{ /* beginning of action switch */
// %% [13.0] actions go here
%% [13.0] actions go here
// end of %% [13.0] actions go here

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			//YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
%% [14.0] code to do back-up for compressed tables and set up yy_cp goes here
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
%ok-for-header

%if-c++-only
%not-for-header
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;




	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];


	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
%ok-for-header
%endif



/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
%if-c-only
static int yy_get_next_buffer (void)
%endif
%if-c++-only
int yyFlexLexer::yy_get_next_buffer()
%endif
{
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */


			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );


			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state YYFARGS0(void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    M4_YY_DECL_GUTS_VAR();

%% [15.0] code to get the start state into yy_current_state goes here

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
%% [16.0] code to find the next state goes here
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
%if-c-only
    static yy_state_type yy_try_NUL_trans  YYFARGS1( yy_state_type, yy_current_state)
%endif
%if-c++-only
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
%endif
{
	register int yy_is_jam;
    M4_YY_DECL_GUTS_VAR(); /* This var may be unused depending upon options. */
%% [17.0] code to find the next state, and perhaps do backing up, goes here

	return yy_is_jam ? 0 : yy_current_state;
}


%if-c-only


    static void yyunput YYFARGS2( int,c, register char *,yy_bp)
%endif
%if-c++-only
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
%endif
{
	register char *yy_cp;
    M4_YY_DECL_GUTS_VAR();

    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

%% [18.0] update yylineno here


    if ( c == '\n' ){
        --yylineno;
    }


	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
%if-c-only

%endif

%if-c-only
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput YYFARGS0(void)
#else
    static int input  YYFARGS0(void)
#endif

%endif
%if-c++-only
    int yyFlexLexer::yyinput()
%endif
{
	int c;
    M4_YY_DECL_GUTS_VAR();

	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

%% [19.0] update BOL and yylineno

	return c;
}
%if-c-only
#endif	/* ifndef YY_NO_INPUT */
%endif

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * M4_YY_DOC_PARAM
 * @note This function does not reset the start condition to @c INITIAL .
 */
%if-c-only
    void yyrestart  YYFARGS1( FILE *,input_file)
%endif
%if-c++-only
    void yyFlexLexer::yyrestart( std::istream* input_file )
%endif
{

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * M4_YY_DOC_PARAM
 */
%if-c-only
    void yy_switch_to_buffer  YYFARGS1( YY_BUFFER_STATE ,new_buffer)
%endif
%if-c++-only
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
%endif
{
    M4_YY_DECL_GUTS_VAR();

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}


%if-c-only
static void yy_load_buffer_state  YYFARGS0(void)
%endif
%if-c++-only
    void yyFlexLexer::yy_load_buffer_state()
%endif
{
    M4_YY_DECL_GUTS_VAR();
	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * M4_YY_DOC_PARAM
 * @return the allocated buffer state.
 */
%if-c-only
    YY_BUFFER_STATE yy_create_buffer  YYFARGS2( FILE *,file, int ,size)
%endif
%if-c++-only
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
%endif
{
	YY_BUFFER_STATE b;


	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * M4_YY_DOC_PARAM
 */
%if-c-only
    void yy_delete_buffer YYFARGS1( YY_BUFFER_STATE ,b)
%endif
%if-c++-only
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
%endif
{
    M4_YY_DECL_GUTS_VAR();

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}


%if-c-only



    
#ifndef __cplusplus
extern int isatty ( int );
#endif /* __cplusplus */
    

%endif

%if-c++-only


extern "C" int isatty ( int );

%endif

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
%if-c-only
    static void yy_init_buffer  YYFARGS2( YY_BUFFER_STATE ,b, FILE *,file)
%endif
%if-c++-only
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
%endif

{
	int oerrno = errno;
    M4_YY_DECL_GUTS_VAR();

	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

%if-c-only


	b->yy_is_interactive = 1;



    
        b->yy_is_interactive = 0;
    
    
        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    

%endif
%if-c++-only
	b->yy_is_interactive = 0;
%endif
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * M4_YY_DOC_PARAM
 */
%if-c-only
    void yy_flush_buffer YYFARGS1( YY_BUFFER_STATE ,b)
%endif
%if-c++-only
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
%endif
{
    M4_YY_DECL_GUTS_VAR();
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

%if-c-or-c++
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  M4_YY_DOC_PARAM
 */
%if-c-only
void yypush_buffer_state YYFARGS1(YY_BUFFER_STATE,new_buffer)
%endif
%if-c++-only
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
%endif
{
    M4_YY_DECL_GUTS_VAR();
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
%endif


%if-c-or-c++
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  M4_YY_DOC_PARAM
 */
%if-c-only
void yypop_buffer_state YYFARGS0(void)
%endif
%if-c++-only
void yyFlexLexer::yypop_buffer_state (void)
%endif
{
    M4_YY_DECL_GUTS_VAR();
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
%endif


%if-c-or-c++
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
%if-c-only
static void yyensure_buffer_stack YYFARGS0(void)
%endif
%if-c++-only
void yyFlexLexer::yyensure_buffer_stack(void)
%endif
{
	int num_to_alloc;
    M4_YY_DECL_GUTS_VAR();

	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
%endif






%if-c-only
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * M4_YY_DOC_PARAM
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  YYFARGS2( char *,base, yy_size_t ,size)
{
	YY_BUFFER_STATE b;


	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
%endif





%if-c-only
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * M4_YY_DOC_PARAM
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string YYFARGS1( const char *, yystr)
{


	return yy_scan_bytes( yystr, strlen(yystr) );
}
%endif





%if-c-only
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * M4_YY_DOC_PARAM
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  YYFARGS2( const char *,yybytes, int ,_yybytes_len)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;


	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
%endif





%if-c-only
    static void yy_push_state YYFARGS1( int ,new_state)
%endif
%if-c++-only
    void yyFlexLexer::yy_push_state( int new_state )
%endif
{
    M4_YY_DECL_GUTS_VAR();
	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}





%if-c-only
    static void yy_pop_state  YYFARGS0(void)
%endif
%if-c++-only
    void yyFlexLexer::yy_pop_state()
%endif
{
    M4_YY_DECL_GUTS_VAR();
	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}





%if-c-only
    static int yy_top_state  YYFARGS0(void)
%endif
%if-c++-only
    int yyFlexLexer::yy_top_state()
%endif
{
    M4_YY_DECL_GUTS_VAR();
	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}


#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

%if-c-only
static void yy_fatal_error YYFARGS1(const char*, msg)
{

	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
%endif
%if-c++-only
void yyFlexLexer::LexerError( const char msg[] )
{
    M4_YY_DECL_GUTS_VAR();
	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
%endif

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */

%if-c-only
%if-reentrant


/** Get the user-defined data for this scanner.
 * M4_YY_DOC_PARAM
 */
YY_EXTRA_TYPE yyget_extra  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    return yyextra;
}

%endif



/** Get the current line number.
 * M4_YY_DOC_PARAM
 */
int yyget_lineno  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}






/** Get the current column number.
 * M4_YY_DOC_PARAM
 */
int yyget_column  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    

    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}





/** Get the input stream.
 * M4_YY_DOC_PARAM
 */
FILE *yyget_in  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    return yyin;
}




/** Get the output stream.
 * M4_YY_DOC_PARAM
 */
FILE *yyget_out  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    return yyout;
}




/** Get the length of the current token.
 * M4_YY_DOC_PARAM
 */
int yyget_leng  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    return yyleng;
}


/** Get the current token.
 * M4_YY_DOC_PARAM
 */


char *yyget_text  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    return yytext;
}


%if-reentrant


/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * M4_YY_DOC_PARAM
 */
void yyset_extra YYFARGS1( YY_EXTRA_TYPE ,user_defined)
{
    M4_YY_DECL_GUTS_VAR();
    yyextra = user_defined ;
}

%endif



/** Set the current line number.
 * @param line_number
 * M4_YY_DOC_PARAM
 */
void yyset_lineno YYFARGS1( int ,line_number)
{
    M4_YY_DECL_GUTS_VAR();


    
        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" ); 
    
    yylineno = line_number;
}






/** Set the current column.
 * @param line_number
 * M4_YY_DOC_PARAM
 */
void yyset_column YYFARGS1( int , column_no)
{
    M4_YY_DECL_GUTS_VAR();


    
        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" ); 
    
    yycolumn = column_no;
}






/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * M4_YY_DOC_PARAM
 * @see yy_switch_to_buffer
 */
void yyset_in YYFARGS1( FILE * ,in_str)
{
    M4_YY_DECL_GUTS_VAR();
    yyin = in_str ;
}




void yyset_out YYFARGS1( FILE * ,out_str)
{
    M4_YY_DECL_GUTS_VAR();
    yyout = out_str ;
}





int yyget_debug  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    return yy_flex_debug;
}




void yyset_debug YYFARGS1( int ,bdebug)
{
    M4_YY_DECL_GUTS_VAR();
    yy_flex_debug = bdebug ;
}

%endif

%if-reentrant
/* Accessor methods for yylval and yylloc */

%if-bison-bridge


YYSTYPE * yyget_lval  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    return yylval;
}




void yyset_lval YYFARGS1( YYSTYPE * ,yylval_param)
{
    M4_YY_DECL_GUTS_VAR();
    yylval = yylval_param;
}





    
YYLTYPE *yyget_lloc  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    return yylloc;
}
    


    
void yyset_lloc YYFARGS1( YYLTYPE * ,yylloc_param)
{
    M4_YY_DECL_GUTS_VAR();
    yylloc = yylloc_param;
}
    


%endif


/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */


int yylex_init( ptr_yy_globals )
    yyscan_t* ptr_yy_globals;


int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

%endif

%if-c-only
static int yy_init_globals YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */




    
    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;



    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;




    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;




    (yytext_ptr) = 0;
    (yy_more_offset) = 0;
    (yy_prev_more_offset) = 0;


/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
%endif


%if-c-only SNIP! this currently causes conflicts with the c++ scanner
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  YYFARGS0(void)
{
    M4_YY_DECL_GUTS_VAR();

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;



    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;




    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;


    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

%if-reentrant
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner  );
    yyscanner = NULL;
%endif
    return 0;
}
%endif




/*
 * Internal utility routines.
 */




#ifndef yytext_ptr
static void yy_flex_strncpy YYFARGS3( char*,s1, const char *,s2, int,n)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif




#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YYFARGS1( const char *,s)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif




void *yyalloc YYFARGS1( yy_size_t ,size)
{
	return (void *) malloc( size );
}




void *yyrealloc  YYFARGS2( void *,ptr, yy_size_t ,size)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}




void yyfree YYFARGS1( void *,ptr)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


